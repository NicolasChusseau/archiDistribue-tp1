/* tslint:disable */
/* eslint-disable */
/**
 * List and User API
 * API documentation for managing lists and users.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Def0
 */
export interface Def0 {
    /**
     * 
     * @type {string}
     * @memberof Def0
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Def0
     */
    'name': string;
    /**
     * 
     * @type {Array<Def1>}
     * @memberof Def0
     */
    'items'?: Array<Def1>;
    /**
     * 
     * @type {string}
     * @memberof Def0
     */
    'status': Def0StatusEnum;
}

export const Def0StatusEnum = {
    Todo: 'todo',
    Done: 'done'
} as const;

export type Def0StatusEnum = typeof Def0StatusEnum[keyof typeof Def0StatusEnum];

/**
 * 
 * @export
 * @interface Def1
 */
export interface Def1 {
    /**
     * 
     * @type {Array<Def2>}
     * @memberof Def1
     */
    'assignedTo'?: Array<Def2>;
    /**
     * 
     * @type {string}
     * @memberof Def1
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Def1
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Def1
     */
    'status': Def1StatusEnum;
}

export const Def1StatusEnum = {
    Todo: 'todo',
    Done: 'done'
} as const;

export type Def1StatusEnum = typeof Def1StatusEnum[keyof typeof Def1StatusEnum];

/**
 * 
 * @export
 * @interface Def2
 */
export interface Def2 {
    /**
     * 
     * @type {string}
     * @memberof Def2
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Def2
     */
    'name': string;
    /**
     * 
     * @type {Array<Def1>}
     * @memberof Def2
     */
    'items'?: Array<Def1>;
}
/**
 * 
 * @export
 * @interface ListsGet200ResponseInner
 */
export interface ListsGet200ResponseInner {
    /**
     * 
     * @type {string}
     * @memberof ListsGet200ResponseInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ListsGet200ResponseInner
     */
    'name': string;
    /**
     * 
     * @type {Array<ListsGet200ResponseInnerItemsInner>}
     * @memberof ListsGet200ResponseInner
     */
    'items'?: Array<ListsGet200ResponseInnerItemsInner>;
    /**
     * 
     * @type {string}
     * @memberof ListsGet200ResponseInner
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface ListsGet200ResponseInnerItemsInner
 */
export interface ListsGet200ResponseInnerItemsInner {
    /**
     * 
     * @type {string}
     * @memberof ListsGet200ResponseInnerItemsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ListsGet200ResponseInnerItemsInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ListsGet200ResponseInnerItemsInner
     */
    'status': string;
    /**
     * 
     * @type {Array<ListsGet200ResponseInnerItemsInnerAssignedToInner>}
     * @memberof ListsGet200ResponseInnerItemsInner
     */
    'assignedTo': Array<ListsGet200ResponseInnerItemsInnerAssignedToInner>;
}
/**
 * 
 * @export
 * @interface ListsGet200ResponseInnerItemsInnerAssignedToInner
 */
export interface ListsGet200ResponseInnerItemsInnerAssignedToInner {
    /**
     * 
     * @type {string}
     * @memberof ListsGet200ResponseInnerItemsInnerAssignedToInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ListsGet200ResponseInnerItemsInnerAssignedToInner
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ListsIdDelete200Response
 */
export interface ListsIdDelete200Response {
    /**
     * 
     * @type {string}
     * @memberof ListsIdDelete200Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ListsIdPutRequest
 */
export interface ListsIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof ListsIdPutRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ListsIdPutRequest
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface ListsPostRequest
 */
export interface ListsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ListsPostRequest
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ListsPostRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ListsPostRequest
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface UsersGet200ResponseInner
 */
export interface UsersGet200ResponseInner {
    /**
     * 
     * @type {string}
     * @memberof UsersGet200ResponseInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UsersGet200ResponseInner
     */
    'name': string;
    /**
     * 
     * @type {Array<ListsPostRequest>}
     * @memberof UsersGet200ResponseInner
     */
    'items'?: Array<ListsPostRequest>;
}
/**
 * 
 * @export
 * @interface UsersIdItemsPost200Response
 */
export interface UsersIdItemsPost200Response {
    /**
     * 
     * @type {string}
     * @memberof UsersIdItemsPost200Response
     */
    'message'?: string;
    /**
     * 
     * @type {ListsPostRequest}
     * @memberof UsersIdItemsPost200Response
     */
    'item'?: ListsPostRequest;
}
/**
 * 
 * @export
 * @interface UsersIdItemsPostRequest
 */
export interface UsersIdItemsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersIdItemsPostRequest
     */
    'itemId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersIdItemsPostRequest
     */
    'listId'?: string;
}
/**
 * 
 * @export
 * @interface UsersIdPutRequest
 */
export interface UsersIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersIdPutRequest
     */
    'name': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rootGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rootGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rootGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rootGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rootGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListsApi - axios parameter creator
 * @export
 */
export const ListsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List all lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a list
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listsIdDelete', 'id', id)
            const localVarPath = `/lists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an item
         * @param {string} id 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdItemsItemIdDelete: async (id: string, itemId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listsIdItemsItemIdDelete', 'id', id)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('listsIdItemsItemIdDelete', 'itemId', itemId)
            const localVarPath = `/lists/{id}/items/{itemId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an item
         * @param {string} id 
         * @param {string} itemId 
         * @param {ListsIdPutRequest} listsIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdItemsItemIdPut: async (id: string, itemId: string, listsIdPutRequest: ListsIdPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listsIdItemsItemIdPut', 'id', id)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('listsIdItemsItemIdPut', 'itemId', itemId)
            // verify required parameter 'listsIdPutRequest' is not null or undefined
            assertParamExists('listsIdItemsItemIdPut', 'listsIdPutRequest', listsIdPutRequest)
            const localVarPath = `/lists/{id}/items/{itemId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listsIdPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new item
         * @param {string} id 
         * @param {ListsPostRequest} listsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdItemsPost: async (id: string, listsPostRequest: ListsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listsIdItemsPost', 'id', id)
            // verify required parameter 'listsPostRequest' is not null or undefined
            assertParamExists('listsIdItemsPost', 'listsPostRequest', listsPostRequest)
            const localVarPath = `/lists/{id}/items`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a list
         * @param {string} id 
         * @param {ListsIdPutRequest} listsIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdPut: async (id: string, listsIdPutRequest: ListsIdPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listsIdPut', 'id', id)
            // verify required parameter 'listsIdPutRequest' is not null or undefined
            assertParamExists('listsIdPut', 'listsIdPutRequest', listsIdPutRequest)
            const localVarPath = `/lists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listsIdPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new list
         * @param {ListsPostRequest} listsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsPost: async (listsPostRequest: ListsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listsPostRequest' is not null or undefined
            assertParamExists('listsPost', 'listsPostRequest', listsPostRequest)
            const localVarPath = `/lists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListsApi - functional programming interface
 * @export
 */
export const ListsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List all lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListsGet200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.listsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a list
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListsIdDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.listsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete an item
         * @param {string} id 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsIdItemsItemIdDelete(id: string, itemId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListsIdDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsIdItemsItemIdDelete(id, itemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.listsIdItemsItemIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update an item
         * @param {string} id 
         * @param {string} itemId 
         * @param {ListsIdPutRequest} listsIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsIdItemsItemIdPut(id: string, itemId: string, listsIdPutRequest: ListsIdPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListsGet200ResponseInnerItemsInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsIdItemsItemIdPut(id, itemId, listsIdPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.listsIdItemsItemIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new item
         * @param {string} id 
         * @param {ListsPostRequest} listsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsIdItemsPost(id: string, listsPostRequest: ListsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListsGet200ResponseInnerItemsInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsIdItemsPost(id, listsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.listsIdItemsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a list
         * @param {string} id 
         * @param {ListsIdPutRequest} listsIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsIdPut(id: string, listsIdPutRequest: ListsIdPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListsGet200ResponseInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsIdPut(id, listsIdPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.listsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new list
         * @param {ListsPostRequest} listsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsPost(listsPostRequest: ListsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListsGet200ResponseInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsPost(listsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.listsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ListsApi - factory interface
 * @export
 */
export const ListsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListsApiFp(configuration)
    return {
        /**
         * 
         * @summary List all lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<ListsGet200ResponseInner>> {
            return localVarFp.listsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a list
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ListsIdDelete200Response> {
            return localVarFp.listsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an item
         * @param {string} id 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdItemsItemIdDelete(id: string, itemId: string, options?: RawAxiosRequestConfig): AxiosPromise<ListsIdDelete200Response> {
            return localVarFp.listsIdItemsItemIdDelete(id, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an item
         * @param {string} id 
         * @param {string} itemId 
         * @param {ListsIdPutRequest} listsIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdItemsItemIdPut(id: string, itemId: string, listsIdPutRequest: ListsIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListsGet200ResponseInnerItemsInner> {
            return localVarFp.listsIdItemsItemIdPut(id, itemId, listsIdPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new item
         * @param {string} id 
         * @param {ListsPostRequest} listsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdItemsPost(id: string, listsPostRequest: ListsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListsGet200ResponseInnerItemsInner> {
            return localVarFp.listsIdItemsPost(id, listsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a list
         * @param {string} id 
         * @param {ListsIdPutRequest} listsIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdPut(id: string, listsIdPutRequest: ListsIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListsGet200ResponseInner> {
            return localVarFp.listsIdPut(id, listsIdPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new list
         * @param {ListsPostRequest} listsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsPost(listsPostRequest: ListsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListsGet200ResponseInner> {
            return localVarFp.listsPost(listsPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListsApi - object-oriented interface
 * @export
 * @class ListsApi
 * @extends {BaseAPI}
 */
export class ListsApi extends BaseAPI {
    /**
     * 
     * @summary List all lists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public listsGet(options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).listsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a list
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public listsIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).listsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an item
     * @param {string} id 
     * @param {string} itemId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public listsIdItemsItemIdDelete(id: string, itemId: string, options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).listsIdItemsItemIdDelete(id, itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an item
     * @param {string} id 
     * @param {string} itemId 
     * @param {ListsIdPutRequest} listsIdPutRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public listsIdItemsItemIdPut(id: string, itemId: string, listsIdPutRequest: ListsIdPutRequest, options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).listsIdItemsItemIdPut(id, itemId, listsIdPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new item
     * @param {string} id 
     * @param {ListsPostRequest} listsPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public listsIdItemsPost(id: string, listsPostRequest: ListsPostRequest, options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).listsIdItemsPost(id, listsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a list
     * @param {string} id 
     * @param {ListsIdPutRequest} listsIdPutRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public listsIdPut(id: string, listsIdPutRequest: ListsIdPutRequest, options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).listsIdPut(id, listsIdPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new list
     * @param {ListsPostRequest} listsPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public listsPost(listsPostRequest: ListsPostRequest, options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).listsPost(listsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdDelete', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a user by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdGet', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Assign an item to a user
         * @param {string} id 
         * @param {UsersIdItemsPostRequest} [usersIdItemsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdItemsPost: async (id: string, usersIdItemsPostRequest?: UsersIdItemsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdItemsPost', 'id', id)
            const localVarPath = `/users/{id}/items`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersIdItemsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a user
         * @param {string} id 
         * @param {UsersIdPutRequest} usersIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdPut: async (id: string, usersIdPutRequest: UsersIdPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdPut', 'id', id)
            // verify required parameter 'usersIdPutRequest' is not null or undefined
            assertParamExists('usersIdPut', 'usersIdPutRequest', usersIdPutRequest)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersIdPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new user
         * @param {ListsGet200ResponseInnerItemsInnerAssignedToInner} listsGet200ResponseInnerItemsInnerAssignedToInner 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost: async (listsGet200ResponseInnerItemsInnerAssignedToInner: ListsGet200ResponseInnerItemsInnerAssignedToInner, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listsGet200ResponseInnerItemsInnerAssignedToInner' is not null or undefined
            assertParamExists('usersPost', 'listsGet200ResponseInnerItemsInnerAssignedToInner', listsGet200ResponseInnerItemsInnerAssignedToInner)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listsGet200ResponseInnerItemsInnerAssignedToInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UsersGet200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListsIdDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a user by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersGet200ResponseInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Assign an item to a user
         * @param {string} id 
         * @param {UsersIdItemsPostRequest} [usersIdItemsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdItemsPost(id: string, usersIdItemsPostRequest?: UsersIdItemsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersIdItemsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdItemsPost(id, usersIdItemsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersIdItemsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a user
         * @param {string} id 
         * @param {UsersIdPutRequest} usersIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdPut(id: string, usersIdPutRequest: UsersIdPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersGet200ResponseInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdPut(id, usersIdPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new user
         * @param {ListsGet200ResponseInnerItemsInnerAssignedToInner} listsGet200ResponseInnerItemsInnerAssignedToInner 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPost(listsGet200ResponseInnerItemsInnerAssignedToInner: ListsGet200ResponseInnerItemsInnerAssignedToInner, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersGet200ResponseInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPost(listsGet200ResponseInnerItemsInnerAssignedToInner, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary List all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<UsersGet200ResponseInner>> {
            return localVarFp.usersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ListsIdDelete200Response> {
            return localVarFp.usersIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a user by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<UsersGet200ResponseInner> {
            return localVarFp.usersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Assign an item to a user
         * @param {string} id 
         * @param {UsersIdItemsPostRequest} [usersIdItemsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdItemsPost(id: string, usersIdItemsPostRequest?: UsersIdItemsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersIdItemsPost200Response> {
            return localVarFp.usersIdItemsPost(id, usersIdItemsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a user
         * @param {string} id 
         * @param {UsersIdPutRequest} usersIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdPut(id: string, usersIdPutRequest: UsersIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersGet200ResponseInner> {
            return localVarFp.usersIdPut(id, usersIdPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new user
         * @param {ListsGet200ResponseInnerItemsInnerAssignedToInner} listsGet200ResponseInnerItemsInnerAssignedToInner 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost(listsGet200ResponseInnerItemsInnerAssignedToInner: ListsGet200ResponseInnerItemsInnerAssignedToInner, options?: RawAxiosRequestConfig): AxiosPromise<UsersGet200ResponseInner> {
            return localVarFp.usersPost(listsGet200ResponseInnerItemsInnerAssignedToInner, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary List all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersGet(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a user
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a user by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersIdGet(id: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Assign an item to a user
     * @param {string} id 
     * @param {UsersIdItemsPostRequest} [usersIdItemsPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersIdItemsPost(id: string, usersIdItemsPostRequest?: UsersIdItemsPostRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersIdItemsPost(id, usersIdItemsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a user
     * @param {string} id 
     * @param {UsersIdPutRequest} usersIdPutRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersIdPut(id: string, usersIdPutRequest: UsersIdPutRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersIdPut(id, usersIdPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new user
     * @param {ListsGet200ResponseInnerItemsInnerAssignedToInner} listsGet200ResponseInnerItemsInnerAssignedToInner 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersPost(listsGet200ResponseInnerItemsInnerAssignedToInner: ListsGet200ResponseInnerItemsInnerAssignedToInner, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersPost(listsGet200ResponseInnerItemsInnerAssignedToInner, options).then((request) => request(this.axios, this.basePath));
    }
}



